import React, { useState, useEffect } from 'react';
import { Play, Pause, RotateCcw, Plus, BookOpen, Clock, Target, TrendingUp, Calendar, Settings } from 'lucide-react';

const LearnFlowApp = () => {
  const [currentView, setCurrentView] = useState('dashboard');
  const [subjects, setSubjects] = useState([
    { id: 1, name: 'Mathematics', color: 'bg-blue-500', totalTime: 0, sessions: 0 },
    { id: 2, name: 'Programming', color: 'bg-green-500', totalTime: 0, sessions: 0 },
    { id: 3, name: 'Science', color: 'bg-purple-500', totalTime: 0, sessions: 0 }
  ]);
  
  const [timer, setTimer] = useState({
    minutes: 25,
    seconds: 0,
    isActive: false,
    isBreak: false,
    currentSubject: null
  });
  
  const [todayStats, setTodayStats] = useState({
    totalStudyTime: 0,
    sessionsCompleted: 0,
    currentStreak: 7
  });
  
  const [schedule] = useState([
    { time: '6:30 AM', subject: 'Mathematics', duration: '2 hours', type: 'Deep Learning' },
    { time: '9:00 AM', subject: 'Programming', duration: '2 hours', type: 'Deep Learning' },
    { time: '1:00 PM', subject: 'Science', duration: '1.5 hours', type: 'Practice' },
    { time: '3:00 PM', subject: 'Language', duration: '1.5 hours', type: 'Interactive' },
    { time: '5:00 PM', subject: 'Skills', duration: '1 hour', type: 'Development' },
    { time: '7:00 PM', subject: 'Review', duration: '1 hour', type: 'Revision' }
  ]);

  // Timer functionality
  useEffect(() => {
    let interval = null;
    if (timer.isActive) {
      interval = setInterval(() => {
        setTimer(prev => {
          if (prev.seconds === 0) {
            if (prev.minutes === 0) {
              // Timer completed
              handleTimerComplete();
              return { ...prev, isActive: false };
            } else {
              return { ...prev, minutes: prev.minutes - 1, seconds: 59 };
            }
          } else {
            return { ...prev, seconds: prev.seconds - 1 };
          }
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [timer.isActive]);

  const handleTimerComplete = () => {
    if (!timer.isBreak && timer.currentSubject) {
      // Update subject stats
      setSubjects(prev => prev.map(subject => 
        subject.id === timer.currentSubject.id 
          ? { ...subject, totalTime: subject.totalTime + 25, sessions: subject.sessions + 1 }
          : subject
      ));
      
      // Update daily stats
      setTodayStats(prev => ({
        ...prev,
        totalStudyTime: prev.totalStudyTime + 25,
        sessionsCompleted: prev.sessionsCompleted + 1
      }));
    }
    
    // Switch to break or back to study
    setTimer(prev => ({
      ...prev,
      minutes: prev.isBreak ? 25 : 5,
      seconds: 0,
      isBreak: !prev.isBreak
    }));
  };

  const startTimer = (subject = null) => {
    setTimer(prev => ({ 
      ...prev, 
      isActive: true, 
      currentSubject: subject || prev.currentSubject 
    }));
  };

  const pauseTimer = () => {
    setTimer(prev => ({ ...prev, isActive: false }));
  };

  const resetTimer = () => {
    setTimer(prev => ({ 
      ...prev, 
      minutes: prev.isBreak ? 5 : 25, 
      seconds: 0, 
      isActive: false 
    }));
  };

  const addSubject = () => {
    const name = prompt('Enter subject name:');
    if (name) {
      const colors = ['bg-red-500', 'bg-yellow-500', 'bg-indigo-500', 'bg-pink-500', 'bg-teal-500'];
      const newSubject = {
        id: Date.now(),
        name,
        color: colors[Math.floor(Math.random() * colors.length)],
        totalTime: 0,
        sessions: 0
      };
      setSubjects(prev => [...prev, newSubject]);
    }
  };

  const formatTime = (minutes) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Study Time</p>
              <p className="text-2xl font-bold text-gray-800">{formatTime(todayStats.totalStudyTime)}</p>
            </div>
            <Clock className="w-8 h-8 text-blue-500" />
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Sessions Completed</p>
              <p className="text-2xl font-bold text-gray-800">{todayStats.sessionsCompleted}</p>
            </div>
            <Target className="w-8 h-8 text-green-500" />
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Current Streak</p>
              <p className="text-2xl font-bold text-gray-800">{todayStats.currentStreak} days</p>
            </div>
            <TrendingUp className="w-8 h-8 text-purple-500" />
          </div>
        </div>
      </div>

      {/* Timer Section */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="text-center">
          <h3 className="text-lg font-semibold mb-4">
            {timer.isBreak ? 'Break Time' : 'Study Session'}
            {timer.currentSubject && ` - ${timer.currentSubject.name}`}
          </h3>
          <div className="text-6xl font-bold text-gray-800 mb-6">
            {String(timer.minutes).padStart(2, '0')}:
            {String(timer.seconds).padStart(2, '0')}
          </div>
          <div className="flex justify-center space-x-4">
            <button
              onClick={() => timer.isActive ? pauseTimer() : startTimer()}
              className="flex items-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors"
            >
              {timer.isActive ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
              <span>{timer.isActive ? 'Pause' : 'Start'}</span>
            </button>
            <button
              onClick={resetTimer}
              className="flex items-center space-x-2 bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors"
            >
              <RotateCcw className="w-5 h-5" />
              <span>Reset</span>
            </button>
          </div>
        </div>
      </div>

      {/* Subject Progress */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Today's Progress</h3>
          <button
            onClick={addSubject}
            className="flex items-center space-x-1 text-blue-500 hover:text-blue-600"
          >
            <Plus className="w-4 h-4" />
            <span>Add Subject</span>
          </button>
        </div>
        <div className="space-y-4">
          {subjects.map(subject => (
            <div key={subject.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div className="flex items-center space-x-3">
                <div className={`w-4 h-4 rounded-full ${subject.color}`}></div>
                <div>
                  <p className="font-medium">{subject.name}</p>
                  <p className="text-sm text-gray-600">{subject.sessions} sessions • {formatTime(subject.totalTime)}</p>
                </div>
              </div>
              <button
                onClick={() => startTimer(subject)}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
              >
                Start
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderSchedule = () => (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold text-gray-800">Today's Schedule</h2>
      <div className="bg-white rounded-lg shadow-md">
        {schedule.map((item, index) => (
          <div key={index} className={`p-4 ${index !== schedule.length - 1 ? 'border-b' : ''} border-gray-200`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="text-sm font-medium text-gray-600 w-20">{item.time}</div>
                <div>
                  <p className="font-medium text-gray-800">{item.subject}</p>
                  <p className="text-sm text-gray-600">{item.type} • {item.duration}</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <span className={`px-2 py-1 text-xs rounded-full ${
                  item.type === 'Deep Learning' ? 'bg-red-100 text-red-600' :
                  item.type === 'Practice' ? 'bg-blue-100 text-blue-600' :
                  item.type === 'Interactive' ? 'bg-green-100 text-green-600' :
                  item.type === 'Development' ? 'bg-purple-100 text-purple-600' :
                  'bg-gray-100 text-gray-600'
                }`}>
                  {item.type}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderAnalytics = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">Analytics</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4">Weekly Overview</h3>
          <div className="space-y-3">
            {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day, index) => (
              <div key={day} className="flex items-center justify-between">
                <span className="text-sm text-gray-600">{day}</span>
                <div className="flex items-center space-x-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-500 h-2 rounded-full" 
                      style={{ width: `${Math.random() * 100}%` }}
                    ></div>
                  </div>
                  <span className="text-sm text-gray-600">{Math.floor(Math.random() * 8)}h</span>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4">Subject Distribution</h3>
          <div className="space-y-3">
            {subjects.map(subject => (
              <div key={subject.id} className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className={`w-3 h-3 rounded-full ${subject.color}`}></div>
                  <span className="text-sm text-gray-600">{subject.name}</span>
                </div>
                <span className="text-sm font-medium">{formatTime(subject.totalTime)}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-2">
              <BookOpen className="w-8 h-8 text-blue-500" />
              <h1 className="text-xl font-bold text-gray-800">LearnFlow</h1>
            </div>
            <div className="flex items-center space-x-1">
              <button
                onClick={() => setCurrentView('dashboard')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'dashboard' 
                    ? 'bg-blue-500 text-white' 
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                Dashboard
              </button>
              <button
                onClick={() => setCurrentView('schedule')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'schedule' 
                    ? 'bg-blue-500 text-white' 
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <Calendar className="w-4 h-4 inline mr-1" />
                Schedule
              </button>
              <button
                onClick={() => setCurrentView('analytics')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentView === 'analytics' 
                    ? 'bg-blue-500 text-white' 
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <TrendingUp className="w-4 h-4 inline mr-1" />
                Analytics
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {currentView === 'dashboard' && renderDashboard()}
        {currentView === 'schedule' && renderSchedule()}
        {currentView === 'analytics' && renderAnalytics()}
      </div>
    </div>
  );
};

export default LearnFlowApp;
